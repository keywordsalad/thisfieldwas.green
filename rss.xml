<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
  <title>This Field Was Green</title>
  <description>I keep my field green by writing about tech and sometimes life.</description>
  <link>https://thisfieldwas.green</link>
  <atom:link href="https://thisfieldwas.green/rss.xml" rel="self" type="application/rss+xml" />
  <image>
    <url>https://thisfieldwas.green/images/grass-256x256.png</url>
    <title>This Field Was Green</title>
    <link>https://thisfieldwas.green</link>
  </image>
  <category>Technology</category>
  <category>Software Engineering</category>
  <language>en-US</language>
  <managingEditor>logan.mcgrath@thisfieldwas.green (Logan McGrath)</managingEditor>
  <webMaster>logan.mcgrath@thisfieldwas.green (Logan McGrath)</webMaster>
  <pubDate>Mon, 05 Sep 2022 12:55:18 -0700</pubDate>
  <lastBuildDate>Mon, 05 Sep 2022 12:55:18 -0700</lastBuildDate>
  <generator>Hakyll</generator>
  <copyright>Copyright &#169; 2012-2022 Logan McGrath. All rights reserved.</copyright>
  <item>
      <title>Parser Combinators</title>
      <description>In my post I introduced function combinators as a pattern for building complex logic. I added the caveat that combinators should not be used to define sets, which I feel undersells the value of combinators as a general programming pattern. In this post we will explore combinators as an applied solution to a common problem: parsing text.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2022/09/05/parser-combinators/</link>
      <guid>https://thisfieldwas.green/blog/2022/09/05/parser-combinators/</guid>
      <pubDate>Mon, 05 Sep 2022 12:55:18 -0700</pubDate>
      <category>functional programming</category>
      <category>programming</category>
      <category>scala</category>
      <category>design patterns</category>
      <category>combinators</category>
      <category>parsing</category>
      </item>
  <item>
      <title>Imperative Computation in Functional Programming</title>
      <description>Remember functors and applicatives? In my last post we explored how functors and applicatives abstract over desired and undesired cases of contexts in order to express control flow and permit independent computation. In this post we will explore monads and how to leverage their specific abstraction to express imperative control flow.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2022/06/17/imperative-computation/</link>
      <guid>https://thisfieldwas.green/blog/2022/06/17/imperative-computation/</guid>
      <pubDate>Fri, 17 Jun 2022 08:47:11 -0700</pubDate>
      <category>functional programming</category>
      <category>programming</category>
      <category>scala</category>
      <category>design patterns</category>
      <category>contexts</category>
      </item>
  <item>
      <title>The Set Function</title>
      <description>What is a Set? A Set can tell you whether or not an value is a member of the Set. This means that a Set is merely a function, specifically of type A to Boolean. In this post I will explore the usage of **combinators** to build a Set from elementary functions alone.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2022/06/16/set-function/</link>
      <guid>https://thisfieldwas.green/blog/2022/06/16/set-function/</guid>
      <pubDate>Thu, 16 Jun 2022 22:22:26 -0700</pubDate>
      <category>functional programming</category>
      <category>programming</category>
      <category>scala</category>
      <category>design patterns</category>
      <category>combinators</category>
      </item>
  <item>
      <title>Enabling Control Flow in Functional Programming</title>
      <description>Remember functors? They are structures that abstract away complexity imposed by nondeterminism present in contexts that produce some output; contexts such as optionality, network interaction, or validation. When contexts fail to produce some output, they are in their undesired case and no computation may be performed against them. In this post we will explore how to exploit this characteristic to halt computation in order to express control flow.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2022/06/05/enabling-control-flow/</link>
      <guid>https://thisfieldwas.green/blog/2022/06/05/enabling-control-flow/</guid>
      <pubDate>Sun, 05 Jun 2022 14:01:07 -0700</pubDate>
      <category>functional programming</category>
      <category>programming</category>
      <category>scala</category>
      <category>design patterns</category>
      <category>contexts</category>
      </item>
  <item>
      <title>Contexts and Effects in Functional Programming</title>
      <description>Have you ever received an unexpected null reference? Have you ever written a function to validate some input only to have it turn into spaghetti over time? How do you anticipate exceptions and protect against them at runtime?</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2022/03/15/contexts-and-effects/</link>
      <guid>https://thisfieldwas.green/blog/2022/03/15/contexts-and-effects/</guid>
      <pubDate>Tue, 15 Mar 2022 09:20:00 -0700</pubDate>
      <category>functional programming</category>
      <category>programming</category>
      <category>scala</category>
      <category>design patterns</category>
      <category>contexts</category>
      </item>
  <item>
      <title>Highly available ssh tunnels</title>
      <description>In my previous post I complained about systemd giving up when it fails to maintain ssh tunnels. In this post, I complain about systemd a bit more and how I gave up and stopped using it for managing my ssh tunnels.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2022/02/09/persistent-ssh-tunnels/</link>
      <guid>https://thisfieldwas.green/blog/2022/02/09/persistent-ssh-tunnels/</guid>
      <pubDate>Wed, 09 Feb 2022 16:02:28 -0800</pubDate>
      <category>self host</category>
      <category>duct tape</category>
      <category>yak shave</category>
      </item>
  <item>
      <title>Reasons why my website is offline</title>
      <description>My website is hosted from a 2007 HP Pavilion tower that my best friend, Vlad, a privacy buff and low-key minimalist, found next to the garbage chute at his condo building.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2021/12/11/reasons-why-my-website-is-offline/</link>
      <guid>https://thisfieldwas.green/blog/2021/12/11/reasons-why-my-website-is-offline/</guid>
      <pubDate>Sat, 11 Dec 2021 14:43:25 -0800</pubDate>
      <category>self host</category>
      <category>configuration management</category>
      <category>tinfoil hat</category>
      <category>duct tape</category>
      <category>yak shave</category>
      </item>
  <item>
      <title>Redoing my website with Haskell and Hakyll</title>
      <description>My website prior to 2021 was authored using octopress or jekyll. Truthfully I don&#39;t remember which as I haven&#39;t touched my website in quite a few years. I want to update my homepage and I&#39;m in a bind because I don&#39;t know how to produce a build after I make changes.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2021/12/05/redoing-my-website/</link>
      <guid>https://thisfieldwas.green/blog/2021/12/05/redoing-my-website/</guid>
      <pubDate>Sun, 05 Dec 2021 08:08:32 -0800</pubDate>
      <category>hakyll</category>
      <category>haskell</category>
      <category>yak shave</category>
      <category>programming</category>
      </item>
  <item>
      <title>Promoting changes with App-Config-App</title>
      <description>The App-Config-App now lets you promote changes between environments!</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2012/11/28/promoting-changes-with-app-config-app/</link>
      <guid>https://thisfieldwas.green/blog/2012/11/28/promoting-changes-with-app-config-app/</guid>
      <pubDate>Wed, 28 Nov 2012 13:04:00 -0600</pubDate>
      <category>angularjs</category>
      <category>perforce</category>
      <category>sinatra</category>
      <category>configuration management</category>
      </item>
  <item>
      <title>App-Config-App in Action</title>
      <description>Paul Hammant found this cool Server-Side Piano and I&#39;ve modified it to be configurable from a running App-Config-App. Because the sound is generated at the server, you&#39;re able to see (hear) the Server-Side Piano change its configuration without reloading the UI.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2012/11/20/app-config-app-in-action/</link>
      <guid>https://thisfieldwas.green/blog/2012/11/20/app-config-app-in-action/</guid>
      <pubDate>Tue, 20 Nov 2012 17:00:00 -0600</pubDate>
      <category>angularjs</category>
      <category>perforce</category>
      <category>sinatra</category>
      <category>configuration management</category>
      </item>
  <item>
      <title>SCM-Backed Application Configuration with Perforce</title>
      <description>Continuing from my last post, I&#39;ve forked Paul Hammant&#39;s original App-Config-App and modified it to work against Perforce. I&#39;ve decided not to continue using Perforce Chronicle as it is primarily intended for content management.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2012/11/16/scm-backed-application-configuration-with-perforce/</link>
      <guid>https://thisfieldwas.green/blog/2012/11/16/scm-backed-application-configuration-with-perforce/</guid>
      <pubDate>Fri, 16 Nov 2012 17:00:00 -0600</pubDate>
      <category>configuration management</category>
      <category>perforce</category>
      <category>sinatra</category>
      <category>angularjs</category>
      </item>
  <item>
      <title>Using Perforce Chronicle for application configuration</title>
      <description>Following Paul Hammant&#39;s post App-config workflow using SCM and subsequent proof of concept backed by Git, I will show that an app-config application backed by Perforce is possible using Perforce Chronicle.</description>
      <dc:creator>Logan McGrath</dc:creator>
      <link>https://thisfieldwas.green/blog/2012/11/07/using-perforce-chronicle-for-application-configuration/</link>
      <guid>https://thisfieldwas.green/blog/2012/11/07/using-perforce-chronicle-for-application-configuration/</guid>
      <pubDate>Wed, 07 Nov 2012 13:54:00 -0600</pubDate>
      <category>perforce</category>
      <category>configuration management</category>
      </item>
  </channel>
</rss>
